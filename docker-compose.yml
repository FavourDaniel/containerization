version: '3.9'

services:
  db:
    container_name: database
    image: postgres:16-alpine
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
    expose:
      - 5432
    env_file:
      - .env

  backend:
    container_name: backend
    image: fast
    restart: always
    ports:
      - 8000:8000
    depends_on:
      - db
    env_file:
      - .env
    platform: linux/arm64 # Patch for M1 Mac
    # build:
    #   context: ./backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`dhee.xyz`) && (PathPrefix(`/api`) || PathPrefix(`/docs`))"
      - "traefik.http.routers.backend.service=backend"
      - "traefik.http.routers.backend.entrypoints=web"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
    networks:
      - default
      - traefik-public


  frontend:
    container_name: frontend
    image: react
    ports:
      - 5173:80   
    restart: always
    # build:
    #   context: ./frontend
    environment:
      - VITE_API_URL=http://localhost:8000
      - NODE_ENV=production
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`dhee.xyz`)"
      - "traefik.http.routers.frontend.service=frontend"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
    networks:
      - default
      - traefik-public


  traefik:
    image: traefik:v3.0
    container_name: "traefik"
    env_file:
      - .env
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.web.address=:80"   # Use "web" as the entrypoint
      - "--entryPoints.websecure.address=:443" #Enable https
      - "--certificatesresolvers.letsencryptresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.letsencryptresolver.acme.email=favourd205@gmail.com"
      - "--certificatesresolvers.letsencryptresolver.acme.storage=/certificates/acme.json"
      - "--certificatesresolvers.letsencryptresolver.acme.tlschallenge=true" 
    ports:
      # The HTTP port
      - "80:80"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
      # # Listen on port 443, default for HTTPS
      - 443:443
    restart: always
    volumes:
      - /etc/localtime:/etc/localtime:ro
      # Add Docker as a mounted volume, so that Traefik can read the labels of other services
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      # Mount the volume to store the certificates
      - traefik-public-certificates:/certificates
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.entrypoints=websecure" # Use 'websecure' for dashboard
      - "traefik.http.routers.traefik.rule=Host(`dhee.xyz`)"
      - "traefik.http.routers.traefik.tls=true"
      # - traefik.http.routers.traefik.service=api@internal
      - "traefik.http.middlewares.admin.basicauth.users=admin:$2y$05$dD4fu4Z8O5an8Tk9t.DCreOzb4J2IIIgbmmCK.HaG9dLxPD1ycddC"
      - "traefik.http.routers.traefik.tls.certresolver=letsencryptresolver"
    networks:
      - default


volumes:
  postgres_data:
  # Create a volume to store the certificates, even if the container is recreated
  traefik-public-certificates:

networks:
  default:
    driver: bridge
  traefik-public: # Create a new network for public access
    driver: bridge